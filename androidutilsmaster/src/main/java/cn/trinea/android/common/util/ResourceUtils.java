package cn.trinea.android.common.util;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import cn.trinea.android.common.util.StringUtils;

import android.content.Context;

/**
 * ResourceUtils
 *
 * Android Resource工具类，可用于从android资源目录的raw和assets目录读取内容，如：
 * geFileFromAssets(Context context, String fileName) 得到assets目录下某个文件内容
 * geFileFromRaw(Context context, int resId) 得到raw目录下某个文件内容
 * 源码可见ResourceUtils.java，更多方法及更详细参数介绍可见ResourceUtils Api Guide。
 */
public class ResourceUtils {

	/**
	 * get an asset using ACCESS_STREAMING mode. This provides access to files
	 * that have been bundled with an application as assets -- that is, files
	 * placed in to the "assets" directory.
	 *
	 * @param context
	 * @param fileName
	 *            The name of the asset to open. This name can be hierarchical.
	 * @return
	 */
	public static String geFileFromAssets(Context context, String fileName) {
		if (context == null || StringUtils.isEmpty(fileName)) {
			return null;
		}

		StringBuilder s = new StringBuilder("");
		try {
			InputStreamReader in = new InputStreamReader(context.getResources()
					.getAssets().open(fileName));
			BufferedReader br = new BufferedReader(in);
			String line;
			while ((line = br.readLine()) != null) {
				s.append(line);
			}
			return s.toString();
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * get content from a raw resource. This can only be used with resources
	 * whose value is the name of an asset files -- that is, it can be used to
	 * open drawable, sound, and raw resources; it will fail on string and color
	 * resources.
	 *
	 * @param context
	 * @param resId
	 *            The resource identifier to open, as generated by the appt
	 *            tool.
	 * @return
	 */
	public static String geFileFromRaw(Context context, int resId) {
		if (context == null) {
			return null;
		}

		StringBuilder s = new StringBuilder();
		try {
			InputStreamReader in = new InputStreamReader(context.getResources()
					.openRawResource(resId));
			BufferedReader br = new BufferedReader(in);
			String line;
			while ((line = br.readLine()) != null) {
				s.append(line);
			}
			return s.toString();
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}
}
